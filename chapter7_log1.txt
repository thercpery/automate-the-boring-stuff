 import re
>>> phoneNumRegex = re.compile(r"\d\d\d-\d\d\d-\d\d\d\d")
>>> mo = phoneNumRegex.search("My number is 415-555-4242.")
>>> mo.group()
'415-555-4242'
>>> re.compile(r"\d\d\d-\d\d\d-\d\d\d\d").search("Call me at noon thru my phone at 143-5579-2525.").group()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'NoneType' object has no attribute 'group'
>>> re.compile(r"\d\d\d-\d\d\d-\d\d\d\d").search("Call me at noon thru my phone at 143-5579-2525.").group()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'NoneType' object has no attribute 'group'
>>> re.compile(r"\d\d\d-\d\d\d-\d\d\d\d").search("Call me at noon thru my phone at 143-579-2525.").group()
'143-579-2525'
>>> phoneNumRegex = re.compile(r"(\d\d\d)-(\d\d\d-\d\d\d\d)")
>>> mo = phoneNumRegex.search("My number is 415-555-4242")
>>> mo.group(1)
'415'
>>> mo.group(2)
'555-4242'
>>> mo.group(0)
'415-555-4242'
>>> mo.group()
'415-555-4242'
>>> mo.groups()
('415', '555-4242')
>>> areaCode, mainNumber = mo.groups()
>>> print(areaCode)
415
>>> print(mainNumber)
555-4242
>>> phoneNumRegex = re.compile(r"(\(\d\d\d)) (\d\d\d-\d\d\d\d)")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Python39\lib\re.py", line 252, in compile
    return _compile(pattern, flags)
  File "C:\Python39\lib\re.py", line 304, in _compile
    p = sre_compile.compile(pattern, flags)
  File "C:\Python39\lib\sre_compile.py", line 764, in compile
    p = sre_parse.parse(p, flags)
  File "C:\Python39\lib\sre_parse.py", line 962, in parse
    raise source.error("unbalanced parenthesis")
re.error: unbalanced parenthesis at position 10
>>> phoneNumRegex = re.compile(r"(\(\d\d\d\)) (\d\d\d-\d\d\d\d)")
>>> mo = phoneNumRegex.search("My phone number is (415) 555-4242")
>>> mo.gorup(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 're.Match' object has no attribute 'gorup'
>>> mo.group(1)
'(415)'
>>> mo.group(2)
'555-4242'
>>> re.compile(r"(\(Parentheses\)")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Python39\lib\re.py", line 252, in compile
    return _compile(pattern, flags)
  File "C:\Python39\lib\re.py", line 304, in _compile
    p = sre_compile.compile(pattern, flags)
  File "C:\Python39\lib\sre_compile.py", line 764, in compile
    p = sre_parse.parse(p, flags)
  File "C:\Python39\lib\sre_parse.py", line 948, in parse
    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
  File "C:\Python39\lib\sre_parse.py", line 443, in _parse_sub
    itemsappend(_parse(source, state, verbose, nested + 1,
  File "C:\Python39\lib\sre_parse.py", line 836, in _parse
    raise source.error("missing ), unterminated subpattern",
re.error: missing ), unterminated subpattern at position 0
>>> heroRegex = re.compile(r"Batman|Tina Fey")
>>> mo1 = heroRegex.search("Batman and Tina Fey")
>>> mo1.group()
'Batman'
>>> mo2 = heroRegex.search("Tina Fey and Batman")
>>> mo2.group()
'Tina Fey'
>>> batRegex = re.compile(r"Bat(man|mobile|copter|bat)")
>>> mo = batRegex.search("Batmobile lost a wheel")
>>> mo.group()
'Batmobile'
>>> mo.group(0)
'Batmobile'
>>> mo.group(1)
'mobile'
>>> batRegex = re.compile(r"Bat(wo)?man")
>>> mo1 = batRegex.search("The adventures of Batman")
>>> mo1.group()
'Batman'
>>> mo2 = batRegex.search("The adventures of Batwoman")
>>> mo2.group()
'Batwoman'
>>> phoneRegex = re.compile(r"(\d\d\d-)?\d\d\d-\d\d\d\d")
>>> mo1 = phoneRegex.search("My number is 415-555-4242")
>>> mo1.group()
'415-555-4242'
>>> mo2 = phoneRegex.search("My number is 555-4242")
>>> mo2.group()
'555-4242'
>>> batRegex = re.compile(r"Bat(wo)*man")
>>> mo1 = batRegex.search("The adventures of Batman")
>>> mo1.group()
'Batman'
>>> mo2 = batRegex.search("The adventures of Batwoman]")
>>> mo2.group()
'Batwoman'
>>> mo3 = batRegex.search("The adventures of Batwowowowoman")
>>> mo3.group()
'Batwowowowoman'
>>> mo3.group(2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: no such group
>>> mo3.group(1)
'wo'
>>> mo3.group(2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: no such group
>>> mo3.group(0)
'Batwowowowoman'
>>> batRegex = re.compile(r"Bat(wo)+man")
>>> mo1 = batRegex.search
>>> mo1 = batRegex.search("The adventures of Batwoman")
>>> mo1.group()
'Batwoman'
>>> mo2 = batRegex.search("The adventures of Batwowowowoman")
>>> mo2.group()
'Batwowowowoman'
>>> mo3 = batRegex.search("The adventures of Batman")
>>> mo3.group()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'NoneType' object has no attribute 'group'
>>> mo3 == None
True
>>> haRegex = re.compile(r"(Ha){3}")
>>> mo1 = haRegex.search("HaHaHa")
>>> mo1.group()
'HaHaHa'
>>> mo2 = haRegex.search("Ha")
>>> mo2.group()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'NoneType' object has no attribute 'group'
>>> mo2 == None
True
>>> mo3 = haRegex.search("hahaha")
>>> mo3.group()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'NoneType' object has no attribute 'group'
>>> greedyHaRegex = re.compile(r"(Ha){3,5}")
>>> mo1 = greedyHaRegex.search("HaHaHaHaHa")
>>> mo1.group()
'HaHaHaHaHa'
>>> mo2 = greedyHaRegex.search("HaHaHa")
>>> mo2.group()
'HaHaHa'
>>> nongreedyHaRegex = re.compile(r"(Ha){3,5}?")
>>> mo2 = nongreedyHaRegex.search("HaHaHaHAHA")
>>> mo2.group()
'HaHaHa'
>>> mo3 = nongreedyHaRegex.search("HAHAHAHAHA")
>>> mo3.group()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'NoneType' object has no attribute 'group'
>>> mo2 = greedyHaRegex.search("HaHaHaHAHA")
>>> mo2.group()
'HaHaHa'
>>> phoneNumRegex = re.compile(r"\d\d\d-\d\d\d-\d\d\d\d")
>>> mo = phoneNumRegex = phoneNumRegex.search("Cell: 415-555-9999 Work: 212-555-0000")
>>> mo.group()
'415-555-9999'
>>> mo.group(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: no such group
>>> phoneNumRegex = re.compile(r"\d\d\d-\d\d\d-\d\d\d\d") # has no groups
>>> numbers = phoneNumRegex.findall("Cell: 415-555-9999 Work: 212-555-0000")
>>> numbers
['415-555-9999', '212-555-0000']
>>> phoneNumRegex = re.compile(r"(\d\d\d)-(\d\d\d)-(\d\d\d\d)") # has groups
>>> numberGroups = phoneNumRegex.findall("Cell: 415-555-9999 Work: 212-555-0000")
>>> numberGroups
[('415', '555', '9999'), ('212', '555', '0000')]
>>> numberGroups[1]
('212', '555', '0000')
>>> xmasRegex = re.compile(r"\d+\s\w+")
>>> twelvedays = xmasRegex.findall("12 drummers, 11 pipers, 10 lords, 9 ladies, 8 maids, 7 swans, 6 geese, 5 rings, 4 birds, 3 hens, 2 doves, 1 partridge")
>>> twelvedays
['12 drummers', '11 pipers', '10 lords', '9 ladies', '8 maids', '7 swans', '6 geese', '5 rings', '4 birds', '3 hens', '2 doves', '1 partridge']
>>> twelvedays[1]
'11 pipers'
>>> xmasRegex = re.compile(r"(\d+\s\w+)")
>>> twelvedays = xmasRegex.findall("12 drummers, 11 pipers, 10 lords, 9 ladies, 8 maids, 7 swans, 6 geese, 5 rings, 4 birds, 3 hens, 2 doves, 1 partridge")
>>> twelvedays
['12 drummers', '11 pipers', '10 lords', '9 ladies', '8 maids', '7 swans', '6 geese', '5 rings', '4 birds', '3 hens', '2 doves', '1 partridge']
>>> twelvedays[0][1]
'2'
>>> list(twelvedays)
['12 drummers', '11 pipers', '10 lords', '9 ladies', '8 maids', '7 swans', '6 geese', '5 rings', '4 birds', '3 hens', '2 doves', '1 partridge']
>>> list(twelvedays[1])
['1', '1', ' ', 'p', 'i', 'p', 'e', 'r', 's']
>>> vowelRegex = re.compile(r"[aeiouAEIOU]")
>>> vowelRegex.findall("RoboCop eats baby food. BABY FOOD.")
['o', 'o', 'o', 'e', 'a', 'a', 'o', 'o', 'A', 'O', 'O']
>>> consonantRegex = re.compile(r"[^aeiouAEIOU]")
>>> consonantRegex.findall("RoboCop eats baby food. BABY FOOD.")
['R', 'b', 'C', 'p', ' ', 't', 's', ' ', 'b', 'b', 'y', ' ', 'f', 'd', '.', ' ', 'B', 'B', 'Y', ' ', 'F', 'D', '.']
>>> beginsWithHello = re.compile(r"^Hello")
>>> beginsWithHello.search("Hello world!")
<re.Match object; span=(0, 5), match='Hello'>
>>> numberGroups[0][1]
'555'
>>> numberGroups[0][0]
'415'
>>> beginsWithHello.search("He said hello.") == None
True
>>> endsWithNumber = re.compile(r"\d$")
>>> endsWithNumber.search("Your number is 42")
<re.Match object; span=(16, 17), match='2'>
>>> endsWithNumber.search("Your number is forty two.")
>>> endsWithNumber.search("Your number is forty two.") == None
True
>>> wholeStringIsNum = re.compile(r"^\d+$")
>>> wholeStringIsNum.search("1234567890")
<re.Match object; span=(0, 10), match='1234567890'>
>>> wholeStringIsNum.search("12345xyz67890")
>>> wholeStringIsNum.search("12345xyz67890") == None
True
>>> type(wholeStringIsNum.search("12  34567890"))
<class 'NoneType'>
>>> type(wholeStringIsNum.search("12  34567890")) == None
False
>>> atRegex = re.compile(r".at")
>>> atRegex.findall("The cat in the hat sat on the flat mat.")
['cat', 'hat', 'sat', 'lat', 'mat']
>>> atRegex.findall("The cat in the hat sat on the flat mat.")[2\]
  File "<stdin>", line 1
    atRegex.findall("The cat in the hat sat on the flat mat.")[2\]
                                                                 ^
SyntaxError: unexpected character after line continuation character
>>> atRegex.findall("The cat in the hat sat on the flat mat.")[2]
'sat'
>>> type(atRegex.findall("The cat in the hat sat on the flat mat."))
<class 'list'>
>>> nameRegex = re.compile(r"First name: (.*) Last name: (.*)")
>>> mo = nameRegex.search("First name: RC Last name: Pery")
>>> mo.group()
'First name: RC Last name: Pery'
>>> mo.group(1)
'RC'
>>> mo.group(2)
'Pery'
>>> nongreedyRegex = re.compile(r"<.*?>")
>>> mo = nongreedyRegex.search("<To serve man> for dinner.")
>>> mo.group()
'<To serve man>'
>>> greedyRegex = re.compile(r"<.*>")
>>> mo = greedyRegex.search("<To serve man> for dinner.")
>>> mo.group()
'<To serve man>'
>>> noNewLineRegex = re.compile(".*")
>>> noNewLineRegex.search("Serve the public trust.\nProtect the innocent.\nUphold the law.").group()
'Serve the public trust.'
>>> newlineRegex = re.compile(".*", re.DOTALL)
>>> newlineRegex.search("Serve the public trust.\nProtect the innocent.\nUphold the law").group()
'Serve the public trust.\nProtect the innocent.\nUphold the law'
>>> regex1 = re.compile("RoboCop")
>>> regex2 = re.compile("ROBOCOP")
>>> regex3 = re.compile("roboc0p")
>>> regex4 = re.compile("RoboC0p")
>>> robocop = re.compile(r"robocop", re.I)
>>> robocop.search("RoboCop is part man, part machine, all cop.").group()
'RoboCop'
>>> robocop.search("ROBOCOP protects the innocent.").group()
'ROBOCOP'
>>> robocop.search("Al, why does your programming book talk about robocop so much?").group()
'robocop'
>>> namesRegex = re.compile(r"Agent \w+")
>>> namesRegex.sub("CENSORED", "Agent Alice gave the secret documents to Agent Bob.")
'CENSORED gave the secret documents to CENSORED.'
>>> agentNamesRegex = re.compile(r"Agent(\w)\w*")
>>> agentNamesRegex.sub(r"\1****", "Agent Alice told Agent Carol that Agent Eve knew Agent Bob was a double agent.")
'Agent Alice told Agent Carol that Agent Eve knew Agent Bob was a double agent.'
>>> agentNamesRegex = re.compile(r"Agent (\w)\w*")
>>> agentNamesRegex.sub(r"\1****", "Agent Alice told Agent Carol that Agent Eve knew Agent Bob was a double agent.")
'A**** told C**** that E**** knew B**** was a double agent.'
>>>